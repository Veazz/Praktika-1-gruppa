expand type Document {
    
int boxDepth = 10

    client function ItemsInBox() {
        string errMsg
        Container box
        InventoryItemRecord SelectedProduct
        while (true) {
            box = ScanBox()
            on fail {
                return
            }
            
            var boxInActualLines = select first * from ActualLines where Item.SSCC == box.Barcode 
            var boxInTUTable = select first * from TransportUnits where Item.TUBarcode == box.Barcode
            
            if (boxInActualLines != null) {
                BoxsItems(box.Barcode)
                break
            }
            else if (boxInTUTable != null) {
                errMsg = "Коробка занята"
                break
            }
            else
                errMsg = null

            while(true) {
                SelectedProduct = ScanProductBarcode(box.Barcode)
                on fail {

                }
            }
        }
    }

    client function BoxsItems (string boxBarcode) {
        var ItemsInBox = select * from ActualLines where Item.SSCC == boxBarcode
        ShowItems(
            Title = "Товары в коробке",
            DataSource = ItemsInBox,
            FooterText = "<button direction=\"deleteBox\" width=\"100%\" align=\"center\">Удалить</button>",

            Columns = [
            new ItemsColumn {
                Title = "Наименование",
                Align = ContentAlignment.MiddleLeft,
                Format = "{Item.ProductName}",
                Width = new Length { Value = 50, Units = LengthUnits.Percents}
            },

            new ItemsColumn {
                Title = "Кол-во",
                Align = ContentAlignment.MiddleCenter,
                Format = "{Item.ActualQuantity}",
                Width = new Length { Value = 25, Units = LengthUnits.Percents}
            },

            new ItemsColumn {
                Title = "Серийный номер",
                Align = ContentAlignment.MiddleCenter,
                Format = "{Item.SN}",
                Width = new Length { Value = 25, Units = LengthUnits.Percents}
            }
            ],

            KeyJumps = [
                new Control {
                    Key = Key.Escape,
                    Action = esc
                }
            ]
        )
        on esc {
            return
        }
        on deleteBox {
            RemoveDocumentLine(DocumentLineToRemove = ItemsInBox)
            return
        }
        refresh
    }

    client function BoxesInPallet() {
        Container pallet
        Container con
        string errMsg

        while (true) {
            pallet = ScanPallet(errMsg)
            on fail {
                return
            }
            errMsg = null
            while(true) {
                con = ScanContainer(errMsg, "ШК текущей паллеты: {pallet.Barcode}")
                on fail {
                    break
                }
                if (con.IsPallet == true)
                    if(pallet.Barcode != con.Barcode) {
                        Confirm(Message = "Закрыть паллету?")
                        on Confirm {
                            var palletInTUTable = select first * from TransportUnits where Item.ParentBarcode == con.Barcode
                            var palletInActualLines = select first * from ActualLines where Item.palletNumber == con.Barcode
                            
                            if (palletInTUTable != null || palletInActualLines != null) {
                                errMsg = "Паллета {con.Barcode} уже закрыта! Отсканируйте другую паллету"
                                break
                            }

                            pallet = con
                            continue
                        }
                        on Decline {
                            continue
                        }
                    }
                    else
                        break
                var boxInTUTable = select first * from TransportUnits where Item.TUBarcode == con.Barcode
                var boxInActualLines = select * from ActualLines where Item.SSCC == con.Barcode

                if (boxInActualLines.Count == 0 && boxInTUTable == null) {
                    errMsg = "Коробки {con.Barcode} нет ни в документе, ни в таблице упаковок"
                    continue
                }
                else
                    errMsg = null
                
                if (boxInActualLines.Count != 0) {
                    for(row in boxInActualLines) {
                        row.palletNumber = pallet.Barcode
                    }
                }
                else
                    boxInTUTable.ParentBarcode = pallet.Barcode
            }
        }
    }
        

    client function ShowActualLines() {
    }

    client function Settings() {
    }
    
    client function Exit() { 
    }
}